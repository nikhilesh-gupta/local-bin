#!/bin/bash
# Written by Nikhilesh Gupta, September 2024

# Define color codes
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# set -x

# Function contains HELP information related to the script
help_and_syntax_section() {
    printf "${YELLOW}[+] Syntax for tool DEPCONF (Dependency-Confusion-Scanner):${NC}\n"
    printf "   -> ${CYAN}depconf -u <url>${NC}         # Specify a package.json endpoint URL\n"
    printf "   -> ${CYAN}depconf -f <package.json>${NC}     # Specify path of package.json file\n"
    printf "${CYAN}   Optional Flags:${NC}\n"
    printf "     ${GREEN}-v${NC}             # For verbosity\n"
    printf "${YELLOW}[#]Description:${NC} ${BLUE}The tool DEPCONF extracts dependencies from a package.json file, whether from a local file or a URL. It then checks each dependency against the NPM registry to verify its existence and assesses whether there's a risk of Dependency Confusion attacks.${NC}\n";
    printf "${YELLOW}[#]Examples:${NC}\n";
    printf "    -> ${CYAN}depconf -u https://www.example.com/package.json${NC}\n";
    printf "    -> ${CYAN}depconf -f package.json${NC}\n";

    exit 0;
}


depconf_url() {
    # Extracting dependencies from package.json URL endpoint
    dependencies=$(curl -sL $url | jq -r '.dependencies | keys[]')

    for dependency in $dependencies; do
        check_package=$(curl -sL https://registry.npmjs.org/$dependency | jq -r 'keys[]')
        
        if [[ $check_package == "error" ]]; then
            printf "${RED}[+]Vulnerable: Possible dependency Confusion on package - $dependency ${NC}\n";
        else
            if [[ "$is_verbose" == true ]]; then
                printf "${GREEN}[-]Not Vulnerable: NPM registry have the package - $dependency ${NC}\n";
            fi
        fi;
    done
}


depconf_file() {
    # Extracting dependencies from local package.json file
    dependencies=$(cat $file | jq -r '.dependencies | keys[]')

    for dependency in $dependencies; do
        check_package=$(curl -sL https://registry.npmjs.org/$dependency | jq -r 'keys[]')

        if [[ $check_package == "error" ]]; then
            printf "${RED}[+]Vulnerable: Possible dependency Confusion on package - $dependency ${NC}\n";
        else
            if [[ "$is_verbose" == true ]]; then
                printf "${GREEN}[-]Not Vulnerable: NPM registry have the package - $dependency ${NC}\n";
            fi
        fi;
    done
}


# Assigning variables for user input

url="" # for single url to the package.json endpoint ('-u')
file="" # for ('-f')
is_verbose=false

# Script variables

is_mandatory_flag_set=0 # To check if either of the mandatory flag ('-d' or '-f') is provided by the user or not


# Checking if no command-line arguments is provided
if [[ $# -eq 0 ]]; then
    cli_arg=false
else
    cli_arg=true
fi


if $cli_arg
then
    # To check if -h flag is provided
    if [[ $1 = '-h' ]]
    then
        help_and_syntax_section
    else
        # Looping through the command-line arguments to parse flags and their values
        while [[ $# -gt 0 ]]; do
            case $1 in
                -u)
                    shift
                    if [[ -z "$1" ]]; then
                        printf "${RED}[-] Flag provided but not defined: -u${NC}\n\n"

                    else
                        url="$1"
                        is_mandatory_flag_set=1
                    fi
                    ;;
                -f)
                    shift
                    if [[ -z "$1" ]]; then
                        printf "${RED}[-] Flag provided but not defined: -f${NC}\n\n"
                    else
                        file="$1"
			            is_mandatory_flag_set=1
                    fi
                    ;;
                -v)
                    is_verbose=true
                    ;;
                *)
                    printf "${RED}[-] Unknown flag or incorrect way to use the flag: $1${NC}\n\n"
                    ;;
            esac
            shift
        done
    fi;
    # Checks if mandatory flags are properly set
    if [[ $is_mandatory_flag_set -eq 0 ]]
    then
        help_and_syntax_section
    fi;

    # Running the script
    if [[ ! -z $url ]]; then
        depconf_url
    fi;
    if [[ ! -z $file ]]; then
        depconf_file
    fi;

else
    # If no argument is provided
    help_and_syntax_section
fi;