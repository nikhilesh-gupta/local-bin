#!/bin/bash
# Written by Nikhilesh Gupta, December 2023 [ Last Updated At : August 2024 ]

# Define color codes
RED='\033[0;31m'
YELLOWB='\033[1;33m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
GREENB='\033[1;32m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color


# Function contains HELP information related to the script
help_and_syntax_section() {
        printf "${YELLOWB}[+]Syntax for tool SUBTO{Subdomain-TakeOver}:${NC}\n";
        printf "   -> ${CYAN}subto -d <subdomain> ${NC}\n"; 
        printf "   -> ${CYAN}subto -f <file.txt>${NC}\n";
        printf "${CYAN}   Optional Flags:${NC}\n"
        printf "     ${GREEN}-s${NC} # To only fetch data which have cloud CNAME records ${MAGENTA}[Only works with '-f' flag]${NC}\n"
        printf "${YELLOWB}[#]Description:${NC} ${BLUE}The tool will check if the provided subdomains are vulnerable to Subdomain TakeOver attack${NC}\n";
        printf "${YELLOWB}[#]Note:${NC} ${BLUE}The file should have the list of subdomains{sub.example.com} seperated with next line${NC}\n";

        exit 0;
}

# Funtion to check Subdomain Takeover for a list of domains!!
subdomain_takeover_check_for_list_of_subdomains() {
        allDomains=$(tr '\n' ', ' < "$file");
        allDomains=${allDomains%,}

        echo "[+]Input file - $file";
        echo "[+]Target Details - $allDomains";
        date;
        echo "";

        for sub_domain in `cat $file`; do
                cname=$(dig CNAME $sub_domain | grep CNAME | grep -e azure -e aws);
                if [[ ! -z $cname ]]
                then
                        record=$(echo $cname | awk '{ print $NF }');
                        #echo $record;
                        status=$(dig $record | grep status: | cut -d "," -f2 | tr -d '[[:blank:]]');
                        #echo $status;
                        if [[ "$status" == "status:NXDOMAIN" ]]
                        then
                                # echo "[+]Asset: $sub_domain | CNAME $record |$status | Possible Subdomain Takeover";
                                printf "${GREENB}[+]Asset: $sub_domain | CNAME $record | $status | Possible Subdomain Takeover${NC}\n";
                        else
                                # echo "[!]Asset: $sub_domain | CNAME $record |$status | Takeover (might) Not Possible";
                                printf "${YELLOW}[!]Asset: $sub_domain | CNAME $record | $status | Takeover (might) Not Possible${NC}\n";
                        fi;
                else
                        if [ "$silent_data_switch" != "true" ]; then
                                printf "${RED}[-]CNAME doesn't exists for $sub_domain${NC}\n"
                        fi;
        fi;
        done;
}


# Funtion to check Subdomain Takeover for a single domain!!
subdomain_takeover_check_for_subdomain() {
        echo "[+]Target Domain - $subdomain";
        date;
        echo "";

        cname=$(dig CNAME $subdomain | grep CNAME | grep -e azure -e aws);
        if [[ ! -z $cname ]]
        then
                record=$(echo $cname | awk '{ print $NF }');
                #echo $record;
                status=$(dig $record | grep status: | cut -d "," -f2 | tr -d '[[:blank:]]');
                echo $status;
                if [[ "$status" == "status:NXDOMAIN" ]]
                then
                        # echo "[+]Asset: $subdomain | CNAME $record | $status | Possible Subdomain Takeover";
                        printf "${GREENB}[+]Asset: $subdomain | CNAME $record | $status | Possible Subdomain Takeover${NC}\n";
                else
                        # echo "[-]Asset: $subdomain | CNAME $record |$status | Takeover (might) Not Possible";
                        printf "${YELLOW}[!]Asset: $subdomain | CNAME $record | $status | Takeover (might) Not Possible${NC}\n";
                fi;
        else
                printf "${RED}[-]CNAME doesn't exists for $subdomain${NC}\n"
        fi;
}

check_for_mandatory_flag() {
	if ! $is_mandatory_flag_set; then
		printf "${RED}[-]Error: Mandatory flag is not provided, please refer to examples provided in help section${NC}\n\n"

		exit 1;

	fi;
}

multiple_mandatory_flag_error() {
        printf "${RED}[-]Error: Multiple flags provided, please refer to examples provided in help section${NC}\n\n"

        exit 1
}


# Assigning variables for user input
subdomain="" # takes a single subdomain
file="" # takes file which contains the data
is_mandatory_flag_set=false # to check if the mandatory flag is provided by the user or not (expect '-s', using atleast any other flag is mandatory)
silent_data_switch=false # a switch to specify if the end-user only wants the most relevant information and avoid unrequired data
flag="" # takes the mandatory flag specified by the end-user

# Checking if no command-line arguments is provided
if [[ -z $1 ]]; then
    cli_arg=false
else
    cli_arg=true
fi

if $cli_arg
then
    # To check if -h flag is provided
    if [[ $1 = '-h' ]]
    then
        help_and_syntax_section
    else
        # Looping through the command-line arguments to parse flags and their values
        while [[ $# -gt 0 ]]; do
            case $1 in
                -f)
                    shift
                    if [[ -z "$1" ]]; then
                        printf "${RED}[-]Error: Flag provided but not defined: -f${NC}\n\n"
                    else
                        if $is_mandatory_flag_set
                        then
                                multiple_mandatory_flag_error
                        fi
                        file=$1
                        is_mandatory_flag_set=true
                        flag="f"
                    fi
                    ;;
                -d)
                    shift
                    if [[ -z "$1" ]]; then
                        printf "${RED}[-]Error: Flag provided but not defined: -d${NC}\n\n"
                    else
                        if $is_mandatory_flag_set
                        then
                                multiple_mandatory_flag_error
                        fi
                        subdomain=$1
                        is_mandatory_flag_set=true
                        flag="d"
                    fi
                    ;;
                -s)
                    silent_data_switch=true
                    ;;
                *)
                    if [[ ! "$1" == *"-"* ]]; then
			    printf "${RED}[-]Error: No flag is provided, please refer to examples provided in help section${NC}\n\n";

			    exit 1;
		    fi;

                    printf "${RED}[-]Error: Unknown flag or incorrect way to use the flag: $1${NC}\n\n"
		    exit 1;
                    ;;
            esac
            shift
        done

        check_for_mandatory_flag

        # Calling the function corresponding to the queried flag
        if [[ $flag = "f" ]]; then
                subdomain_takeover_check_for_list_of_subdomains
        elif [[ $flag = "d" ]]; then
                subdomain_takeover_check_for_subdomain
        fi
    fi;
else
    # If no argument is provided
    help_and_syntax_section
fi;
